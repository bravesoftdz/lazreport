{"version":1,"strings":[
{"hash":80357966,"name":"lr_add_function_const.sdescriptioniswordpresent","sourcebytes":[73,83,87,79,82,68,80,82,69,83,69,78,84,40,60,87,111,114,100,62,44,60,83,116,114,105,110,103,62,44,60,68,101,108,105,109,105,116,101,114,115,62,41,47,68,101,116,101,114,109,105,110,101,115,32,105,102,32,119,111,114,100,32,60,87,111,114,100,62,32,105,115,32,112,114,101,115,101,110,116,32,105,110,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,46,60,68,101,108,105,109,105,116,101,114,115,62,32,105,115,32,116,104,101,32,108,105,115,116,32,111,102,32,119,111,114,100,32,100,101,108,105,109,105,116,101,114,115,46],"value":"ISWORDPRESENT(<Word>,<String>,<Delimiters>)\/Determines if word <Word> is present in the string <String>.<Delimiters> is the list of word delimiters."},
{"hash":12589678,"name":"lr_add_function_const.sdescriptionwordposition","sourcebytes":[87,79,82,68,80,79,83,73,84,73,79,78,40,60,87,111,114,100,78,111,62,44,60,83,116,114,105,110,103,62,44,60,68,101,108,105,109,105,116,101,114,115,62,41,47,82,101,116,117,114,110,115,32,112,111,115,105,116,105,111,110,32,111,102,32,119,111,114,100,32,110,117,109,98,101,114,32,60,87,111,114,100,78,111,62,32,105,110,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,46,60,68,101,108,105,109,105,116,101,114,115,62,32,105,115,32,116,104,101,32,108,105,115,116,32,111,102,32,119,111,114,100,32,100,101,108,105,109,105,116,101,114,115,46],"value":"WORDPOSITION(<WordNo>,<String>,<Delimiters>)\/Returns position of word number <WordNo> in the string <String>.<Delimiters> is the list of word delimiters."},
{"hash":219400014,"name":"lr_add_function_const.sdescriptionextractword","sourcebytes":[69,88,84,82,65,67,84,87,79,82,68,40,60,87,111,114,100,78,111,62,44,60,83,116,114,105,110,103,62,44,60,68,101,108,105,109,105,116,101,114,115,62,41,47,82,101,116,117,114,110,115,32,119,111,114,100,32,110,117,109,98,101,114,32,60,87,111,114,100,78,111,62,32,102,114,111,109,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,46,60,68,101,108,105,109,105,116,101,114,115,62,32,105,115,32,116,104,101,32,108,105,115,116,32,111,102,32,119,111,114,100,32,100,101,108,105,109,105,116,101,114,115,46],"value":"EXTRACTWORD(<WordNo>,<String>,<Delimiters>)\/Returns word number <WordNo> from the string <String>.<Delimiters> is the list of word delimiters."},
{"hash":122193502,"name":"lr_add_function_const.sdescriptionwordcount","sourcebytes":[87,79,82,68,67,79,85,78,84,40,60,83,116,114,105,110,103,62,44,60,68,101,108,105,109,105,116,101,114,115,62,41,47,82,101,116,117,114,110,115,32,110,117,109,98,101,114,32,111,102,32,119,111,114,100,115,32,105,110,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,46,60,68,101,108,105,109,105,116,101,114,115,62,32,105,115,32,116,104,101,32,108,105,115,116,32,111,102,32,119,111,114,100,32,100,101,108,105,109,105,116,101,114,115,46],"value":"WORDCOUNT(<String>,<Delimiters>)\/Returns number of words in the string <String>.<Delimiters> is the list of word delimiters."},
{"hash":156283902,"name":"lr_add_function_const.sdescriptionnpos","sourcebytes":[78,80,79,83,40,60,83,117,98,83,116,114,62,44,60,83,116,114,105,110,103,62,44,60,83,117,98,83,116,114,78,111,62,41,47,82,101,116,117,114,110,115,32,112,111,115,105,116,105,111,110,32,111,102,32,60,83,117,98,83,116,114,78,111,62,45,116,104,32,115,117,98,115,116,114,105,110,103,32,60,83,117,98,83,116,114,62,32,105,110,99,108,117,115,105,111,110,32,105,110,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,46],"value":"NPOS(<SubStr>,<String>,<SubStrNo>)\/Returns position of <SubStrNo>-th substring <SubStr> inclusion in the string <String>."},
{"hash":51356942,"name":"lr_add_function_const.sdescriptionreplacestr","sourcebytes":[82,69,80,76,65,67,69,83,84,82,40,60,83,116,114,105,110,103,62,44,60,83,117,98,83,116,114,49,62,44,60,83,117,98,83,116,114,50,62,41,47,82,101,112,108,97,99,101,115,32,97,108,108,32,105,110,99,108,117,115,105,111,110,115,32,111,102,32,60,83,117,98,83,116,114,49,62,32,115,116,114,105,110,103,32,116,111,32,116,104,101,32,60,83,117,98,83,116,114,50,62,32,115,116,114,105,110,103,32,105,110,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,46],"value":"REPLACESTR(<String>,<SubStr1>,<SubStr2>)\/Replaces all inclusions of <SubStr1> string to the <SubStr2> string in the string <String> and returns the result."},
{"hash":268351598,"name":"lr_add_function_const.sdescriptiontrimright","sourcebytes":[84,82,73,77,82,73,71,72,84,40,60,83,116,114,105,110,103,62,41,47,84,114,105,109,115,32,97,108,108,32,114,105,103,104,116,32,115,112,97,99,101,115,32,102,114,111,109,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,46],"value":"TRIMRIGHT(<String>)\/Trims all right spaces from the string <String> and returns the result."},
{"hash":146289886,"name":"lr_add_function_const.sdescriptiontrimleft","sourcebytes":[84,82,73,77,76,69,70,84,40,60,83,116,114,105,110,103,62,41,47,84,114,105,109,115,32,97,108,108,32,108,101,102,116,32,115,112,97,99,101,115,32,102,114,111,109,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,46],"value":"TRIMLEFT(<String>)\/Trims all left spaces from the string <String> and returns the result."},
{"hash":174655374,"name":"lr_add_function_const.sdescriptiondelete","sourcebytes":[68,69,76,69,84,69,40,60,83,116,114,105,110,103,62,44,60,68,101,108,70,114,111,109,62,44,60,68,101,108,67,111,117,110,116,62,41,47,68,101,108,101,116,101,115,32,60,68,101,108,67,111,117,110,116,62,32,115,121,109,98,111,108,115,32,115,116,97,114,116,105,110,103,32,97,116,32,112,111,115,105,116,105,111,110,32,60,68,101,108,70,114,111,109,62,32,105,110,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,46],"value":"DELETE(<String>,<DelFrom>,<DelCount>)\/Deletes <DelCount> symbols starting at position <DelFrom> in the given string <String> and returns the result."},
{"hash":54586990,"name":"lr_add_function_const.sdescriptioninsert","sourcebytes":[73,78,83,69,82,84,40,60,83,117,98,83,116,114,62,44,60,83,116,114,105,110,103,62,44,60,73,110,115,101,114,116,70,114,111,109,62,41,47,73,110,115,101,114,116,115,32,60,83,117,98,83,116,114,62,32,115,117,98,115,116,114,105,110,103,32,105,110,116,111,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,115,116,97,114,116,105,110,103,32,97,116,32,112,111,115,105,116,105,111,110,32,60,73,110,115,101,114,116,70,114,111,109,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,46],"value":"INSERT(<SubStr>,<String>,<InsertFrom>)\/Inserts <SubStr> substring into <String> string starting at position <InsertFrom> and returns the result."},
{"hash":198070942,"name":"lr_add_function_const.sdescriptiondatetostr","sourcebytes":[68,65,84,69,84,79,83,84,82,40,60,68,97,116,101,62,41,47,67,111,110,118,101,114,116,115,32,100,97,116,101,32,60,68,97,116,101,62,32,116,111,32,115,116,114,105,110,103,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,46],"value":"DATETOSTR(<Date>)\/Converts date <Date> to string and returns the result."},
{"hash":222429934,"name":"lr_add_function_const.sdescriptiontimetostr","sourcebytes":[84,73,77,69,84,79,83,84,82,40,60,84,105,109,101,62,41,47,67,111,110,118,101,114,116,115,32,116,105,109,101,32,60,84,105,109,101,62,32,116,111,32,115,116,114,105,110,103,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,46],"value":"TIMETOSTR(<Time>)\/Converts time <Time> to string and returns the result."},
{"hash":199981806,"name":"lr_add_function_const.sdescriptionreplicate","sourcebytes":[82,69,80,76,73,67,65,84,69,40,60,83,121,109,98,111,108,62,44,60,76,101,110,103,116,104,62,41,47,82,101,116,117,114,110,115,32,116,104,101,32,115,116,114,105,110,103,32,119,105,116,104,32,108,101,110,103,116,104,32,60,76,101,110,103,116,104,62,32,116,104,97,116,32,99,111,110,115,105,115,116,115,32,111,102,32,115,121,109,98,111,108,115,32,60,83,121,109,98,111,108,62,46],"value":"REPLICATE(<Symbol>,<Length>)\/Returns the string with length <Length> that consists of symbols <Symbol>."},
{"hash":43327582,"name":"lr_add_function_const.sdescriptionpadleft","sourcebytes":[80,65,68,76,69,70,84,40,60,83,116,114,105,110,103,62,44,60,76,101,110,103,116,104,62,44,60,83,121,109,98,111,108,62,41,47,65,100,100,115,32,115,121,109,98,111,108,115,32,60,83,121,109,98,111,108,62,32,116,111,32,98,101,103,105,110,32,111,102,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,116,111,32,109,97,107,101,32,105,116,32,97,115,32,108,111,110,103,32,97,115,32,115,116,97,116,101,100,32,105,110,32,116,104,101,32,60,76,101,110,103,116,104,62,32,112,97,114,97,109,101,116,101,114,32,97,110,100,32,114,101,116,117,114,110,115,32,114,101,115,117,108,116,32,115,116,114,105,110,103,46],"value":"PADLEFT(<String>,<Length>,<Symbol>)\/Adds symbols <Symbol> to begin of the string <String> to make it as long as stated in the <Length> parameter and returns result string."},
{"hash":157412430,"name":"lr_add_function_const.sdescriptionpadright","sourcebytes":[80,65,68,82,73,71,72,84,40,60,83,116,114,105,110,103,62,44,60,76,101,110,103,116,104,62,44,60,83,121,109,98,111,108,62,41,47,65,100,100,115,32,115,121,109,98,111,108,115,32,60,83,121,109,98,111,108,62,32,116,111,32,101,110,100,32,111,102,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,116,111,32,109,97,107,101,32,105,116,32,97,115,32,108,111,110,103,32,97,115,32,115,116,97,116,101,100,32,105,110,32,116,104,101,32,60,76,101,110,103,116,104,62,32,112,97,114,97,109,101,116,101,114,32,97,110,100,32,114,101,116,117,114,110,115,32,114,101,115,117,108,116,32,115,116,114,105,110,103,46],"value":"PADRIGHT(<String>,<Length>,<Symbol>)\/Adds symbols <Symbol> to end of the string <String> to make it as long as stated in the <Length> parameter and returns result string."},
{"hash":173302798,"name":"lr_add_function_const.sdescriptionpadcenter","sourcebytes":[80,65,68,67,69,78,84,69,82,40,60,83,116,114,105,110,103,62,44,60,76,101,110,103,116,104,62,44,60,83,121,109,98,111,108,62,41,47,65,100,100,115,32,115,121,109,98,111,108,115,32,60,83,121,109,98,111,108,62,32,116,111,32,98,101,103,105,110,32,97,110,100,32,101,110,100,32,111,102,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,116,111,32,109,97,107,101,32,105,116,32,97,115,32,108,111,110,103,32,97,115,32,115,116,97,116,101,100,32,105,110,32,116,104,101,32,60,76,101,110,103,116,104,62,32,112,97,114,97,109,101,116,101,114,32,97,110,100,32,114,101,116,117,114,110,115,32,114,101,115,117,108,116,32,115,116,114,105,110,103,46],"value":"PADCENTER(<String>,<Length>,<Symbol>)\/Adds symbols <Symbol> to begin and end of the string <String> to make it as long as stated in the <Length> parameter and returns result string."},
{"hash":195564958,"name":"lr_add_function_const.sdescriptionendpos","sourcebytes":[69,78,68,80,79,83,40,60,83,116,114,105,110,103,62,44,60,83,117,98,83,116,114,62,41,47,82,101,116,117,114,110,115,32,112,111,115,105,116,105,111,110,32,111,102,32,115,117,98,115,116,114,105,110,103,32,60,83,117,98,83,116,114,62,32,105,110,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,115,116,97,114,116,105,110,103,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,115,116,114,105,110,103,46],"value":"ENDPOS(<String>,<SubStr>)\/Returns position of substring <SubStr> in the string <String> starting at the end of the string."},
{"hash":225882782,"name":"lr_add_function_const.sdescriptionleftcopy","sourcebytes":[76,69,70,84,67,79,80,89,40,60,83,116,114,105,110,103,62,44,60,67,111,117,110,116,62,41,47,67,111,112,105,101,115,32,110,117,109,98,101,114,32,111,102,32,115,121,109,98,111,108,115,32,60,67,111,117,110,116,62,32,102,114,111,109,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,115,116,97,114,116,105,110,103,32,97,116,32,116,104,101,32,98,101,103,105,110,32,111,102,32,116,104,101,32,115,116,114,105,110,103,46],"value":"LEFTCOPY(<String>,<Count>)\/Copies number of symbols <Count> from the string <String> starting at the begin of the string."},
{"hash":176278030,"name":"lr_add_function_const.sdescriptionrightcopy","sourcebytes":[82,73,71,72,84,67,79,80,89,40,60,83,116,114,105,110,103,62,44,60,67,111,117,110,116,62,41,47,67,111,112,105,101,115,32,110,117,109,98,101,114,32,111,102,32,115,121,109,98,111,108,115,32,60,67,111,117,110,116,62,32,102,114,111,109,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,115,116,97,114,116,105,110,103,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,115,116,114,105,110,103,46],"value":"RIGHTCOPY(<String>,<Count>)\/Copies number of symbols <Count> from the string <String> starting at the end of the string."},
{"hash":87993294,"name":"lr_add_function_const.sdescriptioncomparestr","sourcebytes":[67,79,77,80,65,82,69,83,84,82,40,60,83,116,114,105,110,103,49,62,44,60,83,116,114,105,110,103,50,62,41,47,67,111,109,112,97,114,101,115,32,116,119,111,32,115,116,114,105,110,103,115,46,32,82,101,116,117,114,110,115,32,116,104,101,32,112,111,115,105,116,105,111,110,32,119,104,101,114,101,32,98,101,103,105,110,115,32,116,104,101,32,100,105,102,102,101,114,101,110,99,101,32,98,101,116,119,101,101,110,32,116,104,101,32,115,116,114,105,110,103,115,32,111,114,32,48,32,105,102,32,115,116,114,105,110,103,115,32,97,114,101,32,101,113,117,105,118,97,108,101,110,116,46],"value":"COMPARESTR(<String1>,<String2>)\/Compares two strings. Returns the position where begins the difference between the strings or 0 if strings are equivalent."},
{"hash":184924286,"name":"lr_add_function_const.sdescriptionchr","sourcebytes":[67,72,82,40,60,67,111,100,101,62,41,47,82,101,116,117,114,110,115,32,115,121,109,98,111,108,32,111,102,32,65,83,67,73,73,32,99,111,100,101,32,60,67,111,100,101,62,46],"value":"CHR(<Code>)\/Returns symbol of ASCII code <Code>."},
{"hash":137807806,"name":"lr_add_function_const.sdescriptionvalidint","sourcebytes":[86,65,76,73,68,73,78,84,40,60,83,116,114,105,110,103,62,41,47,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,60,83,116,114,105,110,103,62,32,105,115,32,118,97,108,105,100,32,105,110,116,101,103,101,114,32,118,97,108,117,101,46],"value":"VALIDINT(<String>)\/Returns True if <String> is valid integer value."},
{"hash":198378990,"name":"lr_add_function_const.sdescriptionvalidfloat","sourcebytes":[86,65,76,73,68,70,76,79,65,84,40,60,83,116,114,105,110,103,62,41,47,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,60,83,116,114,105,110,103,62,32,105,115,32,118,97,108,105,100,32,102,108,111,97,116,32,118,97,108,117,101,46],"value":"VALIDFLOAT(<String>)\/Returns True if <String> is valid float value."},
{"hash":265236478,"name":"lr_add_function_const.sdescriptionisrangenum","sourcebytes":[73,83,82,65,78,71,69,78,85,77,40,60,78,117,109,98,101,114,49,62,44,60,78,117,109,98,101,114,50,62,44,60,78,117,109,98,101,114,51,62,41,47,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,60,78,117,109,98,101,114,51,62,32,105,115,32,98,101,116,119,101,101,110,32,60,78,117,109,98,101,114,49,62,32,97,110,100,32,60,78,117,109,98,101,114,50,62,46],"value":"ISRANGENUM(<Number1>,<Number2>,<Number3>)\/Returns True if <Number3> is between <Number1> and <Number2>."},
{"hash":41067086,"name":"lr_add_function_const.sdescriptionstrtofloatdef","sourcebytes":[83,84,82,84,79,70,76,79,65,84,68,69,70,40,60,83,116,114,105,110,103,62,44,60,68,101,102,86,97,108,117,101,62,41,47,67,111,110,118,101,114,116,115,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,102,108,111,97,116,32,118,97,108,117,101,46,32,73,102,32,99,111,110,118,101,114,115,105,111,110,32,102,97,105,108,115,44,32,114,101,116,117,114,110,115,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,60,68,101,102,86,97,108,117,101,62,46],"value":"STRTOFLOATDEF(<String>,<DefValue>)\/Converts <String> string to float value. If conversion fails, returns default value <DefValue>."},
{"hash":256374238,"name":"lr_add_function_const.sdescriptionstrtointdef","sourcebytes":[83,84,82,84,79,73,78,84,68,69,70,40,60,83,116,114,105,110,103,62,44,60,68,101,102,86,97,108,117,101,62,41,47,67,111,110,118,101,114,116,115,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,105,110,116,101,103,101,114,32,118,97,108,117,101,46,32,73,102,32,99,111,110,118,101,114,115,105,111,110,32,102,97,105,108,115,44,32,114,101,116,117,114,110,115,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,60,68,101,102,86,97,108,117,101,62,46],"value":"STRTOINTDEF(<String>,<DefValue>)\/Converts <String> string to integer value. If conversion fails, returns default value <DefValue>."},
{"hash":72346478,"name":"lr_add_function_const.sdescriptionstrtoint","sourcebytes":[83,84,82,84,79,73,78,84,40,60,83,116,114,105,110,103,62,41,47,67,111,110,118,101,114,116,115,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,116,104,101,32,105,110,116,101,103,101,114,32,118,97,108,117,101,46],"value":"STRTOINT(<String>)\/Converts <String> string to the integer value."},
{"hash":142170414,"name":"lr_add_function_const.sdescriptionstrtofloat","sourcebytes":[83,84,82,84,79,70,76,79,65,84,40,60,83,116,114,105,110,103,62,41,47,67,111,110,118,101,114,116,115,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,116,104,101,32,102,108,111,97,116,32,118,97,108,117,101,46],"value":"STRTOFLOAT(<String>)\/Converts <String> string to the float value."},
{"hash":56795278,"name":"lr_add_function_const.sdescriptiondatediff","sourcebytes":[68,65,84,69,68,73,70,70,40,60,68,97,116,101,49,62,44,60,68,97,116,101,50,62,44,60,118,97,114,32,83,116,114,105,110,103,62,41,47,82,101,116,117,114,110,115,32,116,104,101,32,100,105,102,102,101,114,101,110,99,101,32,98,101,116,119,101,101,110,32,116,119,111,32,100,97,116,101,115,32,60,68,97,116,101,49,62,32,97,110,100,32,60,68,97,116,101,50,62,46,32,82,101,115,117,108,116,32,105,115,32,105,110,32,116,104,101,32,115,116,114,105,110,103,32,60,83,116,114,105,110,103,62,32,105,110,32,102,111,114,109,97,116,32,34,100,97,121,115,59,109,111,110,116,104,115,59,121,101,97,114,115,34,46],"value":"DATEDIFF(<Date1>,<Date2>,<var String>)\/Returns the difference between two dates <Date1> and <Date2>. Result is in the string <String> in format \"days;months;years\"."},
{"hash":237647726,"name":"lr_add_function_const.sdescriptionincdate","sourcebytes":[73,78,67,68,65,84,69,40,60,68,97,116,101,62,44,60,83,116,114,105,110,103,62,41,47,73,110,99,114,101,109,101,110,116,115,32,116,104,101,32,100,97,116,101,32,60,68,97,116,101,62,32,98,121,32,103,105,118,101,110,32,110,117,109,98,101,114,32,111,102,32,100,97,121,115,44,32,109,111,110,116,104,115,32,97,110,100,32,121,101,97,114,115,32,112,97,115,115,101,100,32,105,110,32,116,104,101,32,60,83,116,114,105,110,103,62,32,112,97,114,97,109,101,116,101,114,32,105,110,32,102,111,114,109,97,116,32,34,100,97,121,115,59,109,111,110,116,104,115,59,121,101,97,114,115,34,46,32,82,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,32,100,97,116,101,46],"value":"INCDATE(<Date>,<String>)\/Increments the date <Date> by given number of days, months and years passed in the <String> parameter in format \"days;months;years\". Returns the result date."},
{"hash":210828846,"name":"lr_add_function_const.sdescriptioninctime","sourcebytes":[73,78,67,84,73,77,69,40,60,84,105,109,101,62,44,60,83,116,114,105,110,103,62,41,47,73,110,99,114,101,109,101,110,116,115,32,116,104,101,32,116,105,109,101,32,60,84,105,109,101,62,32,98,121,32,103,105,118,101,110,32,110,117,109,98,101,114,32,111,102,32,104,111,117,114,115,44,32,109,105,110,117,116,101,115,44,32,115,101,99,111,110,100,115,32,97,110,100,32,109,105,108,108,105,115,101,99,111,110,100,115,32,112,97,115,115,101,100,32,105,110,32,116,104,101,32,60,83,116,114,105,110,103,62,32,112,97,114,97,109,101,116,101,114,32,105,110,32,102,111,114,109,97,116,32,34,104,59,109,105,110,59,115,101,99,59,109,115,101,99,34,46,32,82,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,32,116,105,109,101,46],"value":"INCTIME(<Time>,<String>)\/Increments the time <Time> by given number of hours, minutes, seconds and milliseconds passed in the <String> parameter in format \"h;min;sec;msec\". Returns the result time."},
{"hash":54488494,"name":"lr_add_function_const.sdescriptiondayspermonth","sourcebytes":[68,65,89,83,80,69,82,77,79,78,84,72,40,60,89,101,97,114,62,44,60,77,111,110,116,104,62,41,47,82,101,116,117,114,110,115,32,100,97,121,115,32,105,110,32,116,104,101,32,103,105,118,101,110,32,109,111,110,116,104,32,60,77,111,110,116,104,62,32,111,102,32,116,104,101,32,121,101,97,114,32,60,89,101,97,114,62,46],"value":"DAYSPERMONTH(<Year>,<Month>)\/Returns days in the given month <Month> of the year <Year>."},
{"hash":106433374,"name":"lr_add_function_const.sdescriptionfirstdayofnextmonth","sourcebytes":[70,73,82,83,84,68,65,89,79,70,78,69,88,84,77,79,78,84,72,40,60,68,97,116,101,62,41,47,82,101,116,117,114,110,115,32,116,104,101,32,100,97,116,101,32,111,102,32,102,105,114,115,116,32,100,97,121,32,111,102,32,116,104,101,32,110,101,120,116,32,109,111,110,116,104,32,111,102,32,100,97,116,101,32,60,68,97,116,101,62,46],"value":"FIRSTDAYOFNEXTMONTH(<Date>)\/Returns the date of first day of the next month of date <Date>."},
{"hash":136974366,"name":"lr_add_function_const.sdescriptionfirstdayofprevmonth","sourcebytes":[70,73,82,83,84,68,65,89,79,70,80,82,69,86,77,79,78,84,72,40,60,68,97,116,101,62,41,47,82,101,116,117,114,110,115,32,116,104,101,32,100,97,116,101,32,111,102,32,102,105,114,115,116,32,100,97,121,32,111,102,32,116,104,101,32,112,114,101,118,105,111,117,115,32,109,111,110,116,104,32,111,102,32,100,97,116,101,32,60,68,97,116,101,62,46],"value":"FIRSTDAYOFPREVMONTH(<Date>)\/Returns the date of first day of the previous month of date <Date>."},
{"hash":140553198,"name":"lr_add_function_const.sdescriptionlastdayofprevmonth","sourcebytes":[76,65,83,84,68,65,89,79,70,80,82,69,86,77,79,78,84,72,40,60,68,97,116,101,62,41,47,82,101,116,117,114,110,115,32,116,104,101,32,100,97,116,101,32,111,102,32,108,97,115,116,32,100,97,121,32,111,102,32,116,104,101,32,112,114,101,118,105,111,117,115,32,109,111,110,116,104,32,111,102,32,100,97,116,101,32,60,68,97,116,101,62,46],"value":"LASTDAYOFPREVMONTH(<Date>)\/Returns the date of last day of the previous month of date <Date>."},
{"hash":47073454,"name":"lr_add_function_const.sdescriptionincday","sourcebytes":[73,78,67,68,65,89,40,60,68,97,116,101,62,44,60,78,117,109,98,101,114,62,41,47,73,110,99,114,101,109,101,110,116,115,32,116,104,101,32,100,97,116,101,32,60,68,97,116,101,62,32,98,121,32,103,105,118,101,110,32,110,117,109,98,101,114,32,111,102,32,100,97,121,115,32,60,78,117,109,98,101,114,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,32,100,97,116,101,46],"value":"INCDAY(<Date>,<Number>)\/Increments the date <Date> by given number of days <Number> and returns the result date."},
{"hash":19727246,"name":"lr_add_function_const.sdescriptionincyear","sourcebytes":[73,78,67,89,69,65,82,40,60,68,97,116,101,62,44,60,78,117,109,98,101,114,62,41,47,73,110,99,114,101,109,101,110,116,115,32,116,104,101,32,100,97,116,101,32,60,68,97,116,101,62,32,98,121,32,103,105,118,101,110,32,110,117,109,98,101,114,32,111,102,32,121,101,97,114,115,32,60,78,117,109,98,101,114,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,32,100,97,116,101,46],"value":"INCYEAR(<Date>,<Number>)\/Increments the date <Date> by given number of years <Number> and returns the result date."},
{"hash":181487950,"name":"lr_add_function_const.sdescriptionisrangedate","sourcebytes":[73,83,82,65,78,71,69,68,65,84,69,40,60,68,97,116,101,49,62,44,60,68,97,116,101,50,62,44,60,68,97,116,101,51,62,41,47,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,100,97,116,101,32,60,68,97,116,101,51,62,32,105,115,32,98,101,116,119,101,101,110,32,60,68,97,116,101,49,62,32,97,110,100,32,60,68,97,116,101,50,62,46],"value":"ISRANGEDATE(<Date1>,<Date2>,<Date3>)\/Returns True if date <Date3> is between <Date1> and <Date2>."},
{"hash":249512654,"name":"lr_add_function_const.sdescriptionstrtodatedef","sourcebytes":[83,84,82,84,79,68,65,84,69,68,69,70,40,60,83,116,114,105,110,103,62,44,60,68,101,102,68,97,116,101,62,41,47,67,111,110,118,101,114,116,115,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,100,97,116,101,46,32,73,102,32,99,111,110,118,101,114,115,105,111,110,32,102,97,105,108,115,44,32,114,101,116,117,114,110,115,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,60,68,101,102,68,97,116,101,62,46],"value":"STRTODATEDEF(<String>,<DefDate>)\/Converts <String> string to date. If conversion fails, returns default value <DefDate>."},
{"hash":227056254,"name":"lr_add_function_const.sdescriptionvaliddate","sourcebytes":[86,65,76,73,68,68,65,84,69,40,60,83,116,114,105,110,103,62,41,47,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,105,115,32,118,97,108,105,100,32,100,97,116,101,46],"value":"VALIDDATE(<String>)\/Returns True if <String> string is valid date."},
{"hash":226117502,"name":"lr_add_function_const.sdescriptionincmonth","sourcebytes":[73,78,67,77,79,78,84,72,40,60,68,97,116,101,62,44,60,78,117,109,98,101,114,62,41,47,73,110,99,114,101,109,101,110,116,115,32,116,104,101,32,100,97,116,101,32,60,68,97,116,101,62,32,98,121,32,103,105,118,101,110,32,110,117,109,98,101,114,32,111,102,32,109,111,110,116,104,115,32,60,78,117,109,98,101,114,62,32,97,110,100,32,114,101,116,117,114,110,115,32,116,104,101,32,114,101,115,117,108,116,32,100,97,116,101,46],"value":"INCMONTH(<Date>,<Number>)\/Increments the date <Date> by given number of months <Number> and returns the result date."},
{"hash":176624078,"name":"lr_add_function_const.sdescriptionisleapyear","sourcebytes":[73,83,76,69,65,80,89,69,65,82,40,60,89,101,97,114,62,41,47,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,60,89,101,97,114,62,32,121,101,97,114,32,105,115,32,108,101,97,112,32,121,101,97,114,46],"value":"ISLEAPYEAR(<Year>)\/Returns True if <Year> year is leap year."},
{"hash":145693902,"name":"lr_add_function_const.sdescriptioncreatedate","sourcebytes":[67,82,69,65,84,69,68,65,84,69,40,60,83,116,114,105,110,103,62,41,47,67,111,110,118,101,114,116,115,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,115,116,114,105,110,103,32,116,104,97,116,32,99,111,110,116,97,105,110,115,32,100,97,116,101,32,116,111,32,117,115,101,32,105,116,32,105,110,32,83,81,76,32,99,108,97,117,115,101,46,32,84,111,32,117,115,101,32,116,104,105,115,32,102,117,110,99,116,105,111,110,32,112,117,116,32,116,104,101,32,115,116,114,105,110,103,32,119,105,116,104,32,100,101,115,105,114,101,100,32,100,97,116,101,32,102,111,114,109,97,116,32,116,111,32,84,102,114,65,100,100,70,117,110,99,116,105,111,110,76,105,98,114,97,114,121,46,70,111,114,109,97,116,68,97,116,101,32,112,114,111,112,101,114,116,121,46],"value":"CREATEDATE(<String>)\/Converts <String> string to string that contains date to use it in SQL clause. To use this function put the string with desired date format to TfrAddFunctionLibrary.FormatDate property."},
{"hash":118796622,"name":"lr_add_function_const.sdescriptioncreatestr","sourcebytes":[67,82,69,65,84,69,83,84,82,40,60,83,116,114,105,110,103,62,41,47,65,100,100,115,32,113,117,111,116,101,115,32,116,111,32,116,104,101,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,117,115,101,32,105,116,32,105,110,32,83,81,76,32,99,108,97,117,115,101,46],"value":"CREATESTR(<String>)\/Adds quotes to the <String> string to use it in SQL clause."},
{"hash":10991198,"name":"lr_add_function_const.sdescriptioncreatenum","sourcebytes":[67,82,69,65,84,69,78,85,77,40,60,83,116,114,105,110,103,62,41,47,67,111,110,118,101,114,116,115,32,60,83,116,114,105,110,103,62,32,115,116,114,105,110,103,32,116,111,32,115,116,114,105,110,103,32,116,104,97,116,32,99,111,110,116,97,105,110,115,32,110,117,109,101,114,105,99,32,118,97,108,117,101,32,116,111,32,117,115,101,32,105,116,32,105,110,32,83,81,76,32,99,108,97,117,115,101,46],"value":"CREATENUM(<String>)\/Converts <String> string to string that contains numeric value to use it in SQL clause."},
{"hash":191859102,"name":"lr_add_function_const.sdescriptionswap","sourcebytes":[83,87,65,80,40,60,118,97,114,32,118,97,114,49,62,44,60,118,97,114,32,118,97,114,50,62,41,47,83,119,97,112,115,32,116,104,101,32,118,97,114,105,97,98,108,101,115,32,118,97,114,49,32,97,110,100,32,118,97,114,50,46],"value":"SWAP(<var var1>,<var var2>)\/Swaps the variables var1 and var2."},
{"hash":16499134,"name":"lr_add_function_const.sdescriptionabs","sourcebytes":[65,66,83,40,60,78,117,109,98,101,114,62,41,47,82,101,116,117,114,110,115,32,97,98,115,111,108,117,116,101,32,118,97,108,117,101,32,60,78,117,109,98,101,114,62],"value":"ABS(<Number>)\/Returns absolute value <Number>"},
{"hash":95129671,"name":"lr_add_function_const.sstringcategory","sourcebytes":[83,116,114,105,110,103],"value":"String"},
{"hash":342184,"name":"lr_add_function_const.smathcategory","sourcebytes":[77,97,116,104],"value":"Math"},
{"hash":305317,"name":"lr_add_function_const.sdatecategory","sourcebytes":[68,97,116,101],"value":"Date"},
{"hash":5680834,"name":"lr_add_function_const.sothercategory","sourcebytes":[79,116,104,101,114],"value":"Other"}
]}
